{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from\"react\";import Clouds from\"./Clouds\";import Moon from\"./Moon\";function SkyColor(_ref){var dateTimeZone=_ref.dateTimeZone,lat=_ref.lat,lon=_ref.lon,convertTimeZone=_ref.convertTimeZone,clouds=_ref.clouds;// *******GOLDEN HOUR**********\n//Call library SunCalc\nvar SunCalc=require('suncalc');var sunCalcData=SunCalc.getTimes(dateTimeZone,lat,lon);//Golden Hour Morning with Time Zone convert\nvar goldenHourMorning=convertTimeZone(sunCalcData.goldenHourEnd);var sunriseTime=convertTimeZone(sunCalcData.sunrise);//Golden Hour Evening with Time Zone convert\nvar goldenHourEvening=convertTimeZone(sunCalcData.goldenHour);var sunsetTime=convertTimeZone(sunCalcData.sunset);console.log(\"goldenHourMorning:\".concat(goldenHourMorning,\"\\n sunrise:\").concat(sunriseTime,\"\\n goldenHourEvening:\").concat(goldenHourEvening,\" \\n sunset: \").concat(sunsetTime));var cloudAmountGradient=1.1-Number(clouds)*0.01;var skyBlueInitRGBA=[135,206,250,1];//Define individual RGBA values according to cloud amount\nvar cloudAmount=Number(clouds);skyBlueInitRGBA[1]-=cloudAmount;skyBlueInitRGBA[0]-=cloudAmount-cloudAmount/2;skyBlueInitRGBA[2]-=cloudAmount;skyBlueInitRGBA[3]-=cloudAmount*0.01;//Sunset \nif(dateTimeZone>=goldenHourEvening&&dateTimeZone<=sunsetTime){document.body.style.background=\"linear-gradient(353deg, rgba(182,110,0, \".concat(cloudAmountGradient,\") 0%, rgba(230,170,15,\").concat(cloudAmountGradient,\") 35%, rgba(255,214,0,\").concat(cloudAmountGradient,\") 100%)\");document.body.style.backgroundAttachment=\"fixed\";document.body.style.backgroundRepeat=\"no-repeat\";}//Sunrise \nelse if(dateTimeZone>=sunriseTime&&dateTimeZone<=goldenHourMorning){document.body.style.background=\"linear-gradient(180deg, rgba(214,254,250,\".concat(cloudAmountGradient,\") 0%, rgba(68,210,247,\").concat(cloudAmountGradient,\") 65%, rgba(142,143,213,\").concat(cloudAmountGradient,\") 100%)\");document.body.style.backgroundAttachment=\"fixed\";document.body.style.backgroundRepeat=\"no-repeat\";}//Night\nelse if(dateTimeZone>=sunsetTime||dateTimeZone<=sunriseTime){document.body.style.backgroundColor=\"#2f3e46\";}//Blue Sky with Clouds\nelse{document.body.style.backgroundColor=\"rgba(\".concat(skyBlueInitRGBA[0],\",\").concat(skyBlueInitRGBA[1],\",\").concat(skyBlueInitRGBA[2],\",\").concat(skyBlueInitRGBA[3],\")\");}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Clouds,{cloudAmount:cloudAmount}),/*#__PURE__*/_jsx(Moon,{dateTimeZone:dateTimeZone,sunsetTime:sunsetTime,sunriseTime:sunriseTime,cloudAmount:cloudAmount})]});}export default SkyColor;","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/SkyColor.jsx"],"names":["React","Clouds","Moon","SkyColor","dateTimeZone","lat","lon","convertTimeZone","clouds","SunCalc","require","sunCalcData","getTimes","goldenHourMorning","goldenHourEnd","sunriseTime","sunrise","goldenHourEvening","goldenHour","sunsetTime","sunset","console","log","cloudAmountGradient","Number","skyBlueInitRGBA","cloudAmount","document","body","style","background","backgroundAttachment","backgroundRepeat","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Clouds from \"./Clouds\";\nimport Moon from \"./Moon\"\n\nfunction SkyColor ({ dateTimeZone,lat,lon,convertTimeZone,clouds}){\n\n    // *******GOLDEN HOUR**********\n    //Call library SunCalc\n    const SunCalc = require('suncalc');\n    const sunCalcData = SunCalc.getTimes(dateTimeZone,lat,lon);\n\n    //Golden Hour Morning with Time Zone convert\n    const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd)\n    const sunriseTime = convertTimeZone(sunCalcData.sunrise);\n\n    //Golden Hour Evening with Time Zone convert\n    const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n    const sunsetTime = convertTimeZone(sunCalcData.sunset);\n\n    console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`); \n\n    let cloudAmountGradient = 1.1 -(Number(clouds) *0.01);\n\n    let skyBlueInitRGBA = [135, 206, 250, 1];\n\n    //Define individual RGBA values according to cloud amount\n    let cloudAmount = Number(clouds);\n    skyBlueInitRGBA[1] -= cloudAmount;\n    skyBlueInitRGBA[0] -= cloudAmount - cloudAmount / 2;\n    skyBlueInitRGBA[2] -= cloudAmount;\n    skyBlueInitRGBA[3] -= cloudAmount * 0.01;\n  \n\n    //Sunset \n    if (dateTimeZone>=goldenHourEvening && dateTimeZone<=sunsetTime) {\n        document.body.style.background = `linear-gradient(353deg, rgba(182,110,0, ${cloudAmountGradient}) 0%, rgba(230,170,15,${cloudAmountGradient}) 35%, rgba(255,214,0,${cloudAmountGradient}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n    //Sunrise \n    else if (dateTimeZone>=sunriseTime && dateTimeZone<=goldenHourMorning) {\n        document.body.style.background = `linear-gradient(180deg, rgba(214,254,250,${cloudAmountGradient}) 0%, rgba(68,210,247,${cloudAmountGradient}) 65%, rgba(142,143,213,${cloudAmountGradient}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n    //Night\n    else  if (dateTimeZone >= sunsetTime|| dateTimeZone<= sunriseTime) {\n        document.body.style.backgroundColor = \"#2f3e46\";\n    }\n    //Blue Sky with Clouds\n    else{\n        document.body.style.backgroundColor = `rgba(${skyBlueInitRGBA[0]},${skyBlueInitRGBA[1]},${skyBlueInitRGBA[2]},${skyBlueInitRGBA[3]})`;\n    }\n\n\n    return(<>\n    <Clouds\n        cloudAmount={cloudAmount}\n    />\n\n    <Moon\n        dateTimeZone={dateTimeZone}\n        sunsetTime={sunsetTime}\n        sunriseTime={sunriseTime}\n        cloudAmount={cloudAmount}\n    />\n\n    \n    </>)\n}\n\nexport default SkyColor;"]},"metadata":{},"sourceType":"module"}