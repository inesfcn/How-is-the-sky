{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\n\nfunction Night({\n  sunrise,\n  sunset,\n  dateTimeZone,\n  convertTimeZone\n}) {\n  _s();\n\n  //Calculate Sunset UTC\n  let sundown = new Date(sunset * 1000);\n  const sundownTimeZone = convertTimeZone(sundown); //Calculate sunrise UTC\n\n  let sunup = new Date(sunrise * 1000);\n  const sunupTimeZone = convertTimeZone(sunup); //Make black on sunset and sunrise\n\n  let sundownUTCgetTime = sundownTimeZone.getTime();\n  let sunupUTCgetTime = sunupTimeZone.getTime();\n  let dateTimeZoneGetTime = dateTimeZone.getTime();\n\n  if (dateTimeZoneGetTime >= sundownUTCgetTime || dateTimeZoneGetTime <= sunupUTCgetTime) {\n    document.body.style.backgroundColor = \"#2f3e46\";\n  } //Moon Toggle\n\n\n  const [night, setNight] = useState(false);\n  useEffect(() => {\n    if (dateTimeZoneGetTime >= sundownUTCgetTime || dateTimeZoneGetTime <= sunupUTCgetTime) {\n      setNight(true);\n    }\n  }, [night]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Night, \"6InrpTwkVy5mEQ5H4ZjvnYBlCng=\");\n\n_c = Night;\nexport default Night;\n\nvar _c;\n\n$RefreshReg$(_c, \"Night\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/Night.jsx"],"names":["React","Night","sunrise","sunset","dateTimeZone","convertTimeZone","sundown","Date","sundownTimeZone","sunup","sunupTimeZone","sundownUTCgetTime","getTime","sunupUTCgetTime","dateTimeZoneGetTime","document","body","style","backgroundColor","night","setNight","useState","useEffect"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,CAAgB;AAACC,EAAAA,OAAD;AAASC,EAAAA,MAAT;AAAgBC,EAAAA,YAAhB;AAA6BC,EAAAA;AAA7B,CAAhB,EAA8D;AAAA;;AAC1D;AACA,MAAIC,OAAO,GAAE,IAAIC,IAAJ,CAASJ,MAAM,GAAG,IAAlB,CAAb;AACA,QAAMK,eAAe,GAAGH,eAAe,CAACC,OAAD,CAAvC,CAH0D,CAK1D;;AACA,MAAIG,KAAK,GAAG,IAAIF,IAAJ,CAASL,OAAO,GAAG,IAAnB,CAAZ;AACA,QAAMQ,aAAa,GAAGL,eAAe,CAACI,KAAD,CAArC,CAP0D,CAS1D;;AACA,MAAIE,iBAAiB,GAAGH,eAAe,CAACI,OAAhB,EAAxB;AACA,MAAIC,eAAe,GAAGH,aAAa,CAACE,OAAd,EAAtB;AACA,MAAIE,mBAAmB,GAAGV,YAAY,CAACQ,OAAb,EAA1B;;AAEA,MAAIE,mBAAmB,IAAIH,iBAAvB,IAA4CG,mBAAmB,IAAGD,eAAtE,EAAuF;AACrFE,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsC,SAAtC;AACD,GAhByD,CAkB1D;;;AACD,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBC,QAAQ,CAAC,KAAD,CAA/B;AAECC,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAIR,mBAAmB,IAAIH,iBAAvB,IAA4CG,mBAAmB,IAAGD,eAAtE,EAAuF;AACrFO,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIP,CAACD,KAAD,CAJO,CAAT;AAOA,sBACE,qCADF;AAIH;;GAhCQlB,K;;KAAAA,K;AAkCT,eAAeA,KAAf","sourcesContent":["import React from \"react\";\n\nfunction Night ({sunrise,sunset,dateTimeZone,convertTimeZone}){\n    //Calculate Sunset UTC\n    let sundown= new Date(sunset * 1000);\n    const sundownTimeZone = convertTimeZone(sundown)\n\n    //Calculate sunrise UTC\n    let sunup = new Date(sunrise * 1000);\n    const sunupTimeZone = convertTimeZone(sunup)\n\n    //Make black on sunset and sunrise\n    let sundownUTCgetTime = sundownTimeZone.getTime();\n    let sunupUTCgetTime = sunupTimeZone.getTime();\n    let dateTimeZoneGetTime = dateTimeZone.getTime();\n\n    if (dateTimeZoneGetTime >= sundownUTCgetTime || dateTimeZoneGetTime<= sunupUTCgetTime) {\n      document.body.style.backgroundColor = \"#2f3e46\";\n    }\n\n    //Moon Toggle\n   const [night,setNight]=useState(false)\n\n    useEffect(()=>{\n      if (dateTimeZoneGetTime >= sundownUTCgetTime || dateTimeZoneGetTime<= sunupUTCgetTime) {\n        setNight(true)\n      }\n    },[night])\n\n\n    return(\n      <>\n      </>\n    )\n}\n\nexport default Night;"]},"metadata":{},"sourceType":"module"}