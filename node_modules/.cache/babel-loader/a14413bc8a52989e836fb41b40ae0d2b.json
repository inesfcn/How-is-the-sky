{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from\"react\";function DisplayInfo(_ref){var city=_ref.city,setSubmit=_ref.setSubmit,temp=_ref.temp,desc=_ref.desc,currentTime=_ref.currentTime,clouds=_ref.clouds,sunrise=_ref.sunrise,sunset=_ref.sunset,convertTimeZone=_ref.convertTimeZone;// No decimal value for temperature\nvar temperature=parseInt(temp);//Convert UNIX sunrise and sunset\nfunction unixToFormat(unixDate){var newDate=new Date(unixDate*1000);var newDateTZ=convertTimeZone(newDate);var hour=(\"0\"+newDateTZ.getHours()).slice(-2);var mins=(\"0\"+newDateTZ.getMinutes()).slice(-2);var formattedDate=\"\".concat(hour,\":\").concat(mins);return formattedDate;}var sunriseFormatted=unixToFormat(sunrise);var sunsetFormatted=unixToFormat(sunset);return/*#__PURE__*/_jsxs(\"div\",{className:\"info-displays\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"infoDisplay\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"city-info\",children:city}),/*#__PURE__*/_jsxs(\"h1\",{className:\"time-info\",children:[\" | \",currentTime]}),/*#__PURE__*/_jsxs(\"h1\",{className:\"temp-info\",children:[\" | \",temperature,\"\\xB0C\"]}),/*#__PURE__*/_jsxs(\"h1\",{className:\"temp-desc\",children:[\" | \",desc]}),/*#__PURE__*/_jsxs(\"h1\",{className:\"temp-clouds\",children:[\" | Clouds: \",clouds,\"%\"]}),/*#__PURE__*/_jsxs(\"h1\",{className:\"temp-sunrise\",children:[\" | Sunrise: \",sunriseFormatted]}),/*#__PURE__*/_jsxs(\"h1\",{className:\"temp-sunrise\",children:[\" | Sunset: \",sunsetFormatted]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"anotherCity\",onClick:function onClick(){return setSubmit(false);},children:\"Check another city\"})]});}export default DisplayInfo;","map":{"version":3,"sources":["/home/dcil121/Desktop/version2/src/components/DisplayInfo.jsx"],"names":["React","DisplayInfo","city","setSubmit","temp","desc","currentTime","clouds","sunrise","sunset","convertTimeZone","temperature","parseInt","unixToFormat","unixDate","newDate","Date","newDateTZ","hour","getHours","slice","mins","getMinutes","formattedDate","sunriseFormatted","sunsetFormatted"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,QAASC,CAAAA,WAAT,MAAkG,IAA5EC,CAAAA,IAA4E,MAA5EA,IAA4E,CAAvEC,SAAuE,MAAvEA,SAAuE,CAA7DC,IAA6D,MAA7DA,IAA6D,CAAxDC,IAAwD,MAAxDA,IAAwD,CAAnDC,WAAmD,MAAnDA,WAAmD,CAAvCC,MAAuC,MAAvCA,MAAuC,CAAhCC,OAAgC,MAAhCA,OAAgC,CAAxBC,MAAwB,MAAxBA,MAAwB,CAAjBC,eAAiB,MAAjBA,eAAiB,CAC9F;AACA,GAAIC,CAAAA,WAAW,CAAGC,QAAQ,CAACR,IAAD,CAA1B,CAEC;AACA,QAASS,CAAAA,YAAT,CAAsBC,QAAtB,CAA+B,CAC5B,GAAIC,CAAAA,OAAO,CAAG,GAAIC,CAAAA,IAAJ,CAASF,QAAQ,CAAG,IAApB,CAAd,CACA,GAAIG,CAAAA,SAAS,CAAGP,eAAe,CAACK,OAAD,CAA/B,CACA,GAAIG,CAAAA,IAAI,CAAG,CAAC,IAAMD,SAAS,CAACE,QAAV,EAAP,EAA6BC,KAA7B,CAAmC,CAAC,CAApC,CAAX,CACA,GAAIC,CAAAA,IAAI,CAAG,CAAC,IAAMJ,SAAS,CAACK,UAAV,EAAP,EAA+BF,KAA/B,CAAqC,CAAC,CAAtC,CAAX,CACA,GAAIG,CAAAA,aAAa,WAAML,IAAN,aAAcG,IAAd,CAAjB,CACA,MAAOE,CAAAA,aAAP,CACH,CACD,GAAMC,CAAAA,gBAAgB,CAAGX,YAAY,CAACL,OAAD,CAArC,CACA,GAAMiB,CAAAA,eAAe,CAAGZ,YAAY,CAACJ,MAAD,CAApC,CAEA,mBACA,aAAK,SAAS,CAAC,eAAf,wBACI,aAAK,SAAS,CAAC,aAAf,wBACI,WAAI,SAAS,CAAC,WAAd,UAA2BP,IAA3B,EADJ,cAEI,YAAI,SAAS,CAAC,WAAd,iBAA8BI,WAA9B,GAFJ,cAGI,YAAI,SAAS,CAAC,WAAd,iBAA8BK,WAA9B,WAHJ,cAII,YAAI,SAAS,CAAC,WAAd,iBAA8BN,IAA9B,GAJJ,cAKI,YAAI,SAAS,CAAC,aAAd,yBAAwCE,MAAxC,OALJ,cAMI,YAAI,SAAS,CAAC,cAAd,0BAA0CiB,gBAA1C,GANJ,cAOI,YAAI,SAAS,CAAC,cAAd,yBAAyCC,eAAzC,GAPJ,GADJ,cAUI,eAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAC,aAAhC,CAA8C,OAAO,CAAE,yBAAItB,CAAAA,SAAS,CAAC,KAAD,CAAb,EAAvD,gCAVJ,GADA,CAcH,CAED,cAAeF,CAAAA,WAAf","sourcesContent":["import React from \"react\";\n\nfunction DisplayInfo({city,setSubmit,temp,desc,currentTime,clouds,sunrise,sunset,convertTimeZone}){\n    // No decimal value for temperature\n    let temperature = parseInt(temp)\n\n     //Convert UNIX sunrise and sunset\n     function unixToFormat(unixDate){\n        let newDate = new Date(unixDate * 1000)\n        let newDateTZ = convertTimeZone(newDate)\n        let hour = (\"0\" + newDateTZ.getHours()).slice(-2);\n        let mins = (\"0\" + newDateTZ.getMinutes()).slice(-2);\n        let formattedDate = `${hour}:${mins}`;\n        return formattedDate;\n    }\n    const sunriseFormatted = unixToFormat(sunrise);\n    const sunsetFormatted = unixToFormat(sunset);\n   \n    return(\n    <div className=\"info-displays\">\n        <div className=\"infoDisplay\">\n            <h1 className=\"city-info\">{city}</h1>\n            <h1 className=\"time-info\"> | {currentTime}</h1>\n            <h1 className=\"temp-info\"> | {temperature}Â°C</h1>\n            <h1 className=\"temp-desc\"> | {desc}</h1>\n            <h1 className=\"temp-clouds\"> | Clouds: {clouds}%</h1>\n            <h1 className=\"temp-sunrise\"> | Sunrise: {sunriseFormatted}</h1>\n            <h1 className=\"temp-sunrise\"> | Sunset: {sunsetFormatted}</h1>\n        </div>\n        <button type=\"button\" className=\"anotherCity\" onClick={()=>setSubmit(false)}>Check another city</button>\n\t</div>\n    )\n}\n\nexport default DisplayInfo;"]},"metadata":{},"sourceType":"module"}