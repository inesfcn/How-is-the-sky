{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/version2/src/components/MoonSun.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\n\nfunction MoonSun({\n  dateTimeZone,\n  sunsetTime,\n  sunriseTime,\n  cloudAmount\n}) {\n  _s();\n\n  const [moon, setMoon] = useState(false);\n  const [sun, setSun] = useState(true);\n  useEffect(() => {\n    if (dateTimeZone >= sunsetTime || dateTimeZone <= sunriseTime) {\n      setMoon(true);\n      setSun(false);\n    }\n  }, [dateTimeZone, sunriseTime, sunsetTime]); //SunCalc \n\n  const SunCalc = require('suncalc');\n\n  const moonData = SunCalc.getMoonIllumination(dateTimeZone);\n  const moonPhase = moonData.phase;\n  const boxShadowPX = -Math.abs(moonPhase * 210);\n  const opacityClouds = 1 - cloudAmount * 0.01;\n  const moonStyle = {\n    boxShadow: `inset ${boxShadowPX}px 0px rgba(241, 238, 225, ${opacityClouds})`\n  };\n  const sunStyle = {\n    backgroundColor: `rgba(255, 217, 0, ${opacityClouds})`\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [moon && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moon\",\n      style: moonStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this), sun && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sun\",\n      style: sunStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MoonSun, \"fJ6X9qYHWsbcJfkgZJjhTx2YsLg=\");\n\n_c = MoonSun;\nexport default MoonSun;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoonSun\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/version2/src/components/MoonSun.jsx"],"names":["React","useEffect","useState","MoonSun","dateTimeZone","sunsetTime","sunriseTime","cloudAmount","moon","setMoon","sun","setSun","SunCalc","require","moonData","getMoonIllumination","moonPhase","phase","boxShadowPX","Math","abs","opacityClouds","moonStyle","boxShadow","sunStyle","backgroundColor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,OAAT,CAAkB;AAACC,EAAAA,YAAD;AAAeC,EAAAA,UAAf;AAA0BC,EAAAA,WAA1B;AAAsCC,EAAAA;AAAtC,CAAlB,EAAqE;AAAA;;AAEjE,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAgBP,QAAQ,CAAC,KAAD,CAA9B;AACA,QAAM,CAACQ,GAAD,EAAKC,MAAL,IAAaT,QAAQ,CAAC,IAAD,CAA3B;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIG,YAAY,IAAIC,UAAhB,IAA6BD,YAAY,IAAGE,WAAhD,EAA6D;AACzDG,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,MAAAA,MAAM,CAAC,KAAD,CAAN;AACH;AACJ,GALQ,EAKP,CAACP,YAAD,EAAcE,WAAd,EAA0BD,UAA1B,CALO,CAAT,CALiE,CAYjE;;AACA,QAAMO,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,QAAMC,QAAQ,GAAGF,OAAO,CAACG,mBAAR,CAA4BX,YAA5B,CAAjB;AACA,QAAMY,SAAS,GAAGF,QAAQ,CAACG,KAA3B;AAEA,QAAMC,WAAW,GAAC,CAACC,IAAI,CAACC,GAAL,CAASJ,SAAS,GAAG,GAArB,CAAnB;AACA,QAAMK,aAAa,GAAE,IAAId,WAAW,GAAG,IAAvC;AAEA,QAAMe,SAAS,GAAG;AACdC,IAAAA,SAAS,EAAG,SAAQL,WAAY,8BAA6BG,aAAc;AAD7D,GAAlB;AAIA,QAAMG,QAAQ,GAAG;AACbC,IAAAA,eAAe,EAAG,qBAAoBJ,aAAc;AADvC,GAAjB;AAIA,sBACA;AAAA,eACCb,IAAI,iBACL;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAEc;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFA,EAICZ,GAAG,iBACJ;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAEc;AAA5B;AAAA;AAAA;AAAA;AAAA,YALA;AAAA,kBADA;AASH;;GArCQrB,O;;KAAAA,O;AAuCR,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction MoonSun ({dateTimeZone, sunsetTime,sunriseTime,cloudAmount}){\n\n    const [moon,setMoon]= useState(false)\n    const [sun,setSun]=useState(true)\n\n    useEffect(()=>{\n        if (dateTimeZone >= sunsetTime|| dateTimeZone<= sunriseTime) {\n            setMoon(true);\n            setSun(false);\n        }\n    },[dateTimeZone,sunriseTime,sunsetTime])\n        \n    //SunCalc \n    const SunCalc = require('suncalc');\n    const moonData = SunCalc.getMoonIllumination(dateTimeZone);\n    const moonPhase = moonData.phase\n\n    const boxShadowPX=-Math.abs(moonPhase * 210) ;\n    const opacityClouds =1- (cloudAmount * 0.01);\n\n    const moonStyle = {\n        boxShadow: `inset ${boxShadowPX}px 0px rgba(241, 238, 225, ${opacityClouds})`,\n    };\n\n    const sunStyle = {\n        backgroundColor: `rgba(255, 217, 0, ${opacityClouds})`,\n    }\n\n    return(\n    <>\n    {moon&&\n    <div className=\"moon\" style={moonStyle}></div>\n    }\n    {sun&&\n    <div className=\"sun\" style={sunStyle}></div>\n    }\n    </>)\n}\n\n export default MoonSun;"]},"metadata":{},"sourceType":"module"}