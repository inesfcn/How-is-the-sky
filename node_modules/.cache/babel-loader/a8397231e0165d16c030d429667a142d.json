{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport React from \"react\";\n\nfunction SkyColor({\n  clouds,\n  dateTimeZone,\n  lat,\n  lon,\n  convertTimeZone\n}) {\n  let skyBlueInitRGBA = [135, 206, 250, 1];\n  let cloudAmount = Number(clouds); //Define individual RGBA values according to cloud amount\n\n  skyBlueInitRGBA[1] -= cloudAmount;\n  skyBlueInitRGBA[0] -= cloudAmount - cloudAmount / 2;\n  skyBlueInitRGBA[2] -= cloudAmount;\n  skyBlueInitRGBA[3] -= cloudAmount * 0.01;\n  document.body.style.backgroundColor = `rgba(${skyBlueInitRGBA[0]},${skyBlueInitRGBA[1]},${skyBlueInitRGBA[2]},${skyBlueInitRGBA[3]})`; //Call library SunCalc\n\n  const SunCalc = require('suncalc');\n\n  const sunCalcData = SunCalc.getTimes(dateTimeZone, lat, lon); //Golden Hour Morning with Time Zone convert\n\n  const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd);\n  const sunriseTime = convertTimeZone(sunCalcData.sunrise); //Golden Hour Evening with Time Zone convert\n\n  const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n  const sunsetTime = convertTimeZone(sunCalcData.sunset); // console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`); \n  //Sunset if statement\n\n  if (dateTimeZone >= goldenHourEvening && dateTimeZone <= sunsetTime) {\n    document.body.style.background = \"linear-gradient(353deg, rgba(182,110,0,1) 0%, rgba(230,170,15,1) 35%, rgba(255,214,0,1) 100%)\";\n    document.body.style.backgroundAttachment = \"fixed\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n  } //Sunrise if statement\n\n\n  if (dateTimeZone >= sunriseTime && dateTimeZone <= goldenHourMorning) {\n    document.body.style.background = \"linear-gradient(180deg, rgba(214,254,250,1) 0%, rgba(68,210,247,1) 65%, rgba(142,143,213,1) 100%)\";\n    document.body.style.backgroundAttachment = \"fixed\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = SkyColor;\nexport default SkyColor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SkyColor\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/SkyColor.jsx"],"names":["React","SkyColor","clouds","dateTimeZone","lat","lon","convertTimeZone","skyBlueInitRGBA","cloudAmount","Number","document","body","style","backgroundColor","SunCalc","require","sunCalcData","getTimes","goldenHourMorning","goldenHourEnd","sunriseTime","sunrise","goldenHourEvening","goldenHour","sunsetTime","sunset","background","backgroundAttachment","backgroundRepeat"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,SAASC,QAAT,CAAmB;AAACC,EAAAA,MAAD;AAAQC,EAAAA,YAAR;AAAqBC,EAAAA,GAArB;AAAyBC,EAAAA,GAAzB;AAA6BC,EAAAA;AAA7B,CAAnB,EAAiE;AAC7D,MAAIC,eAAe,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,CAAhB,CAAtB;AACA,MAAIC,WAAW,GAAGC,MAAM,CAACP,MAAD,CAAxB,CAF6D,CAG7D;;AACAK,EAAAA,eAAe,CAAC,CAAD,CAAf,IAAsBC,WAAtB;AACAD,EAAAA,eAAe,CAAC,CAAD,CAAf,IAAsBC,WAAW,GAAGA,WAAW,GAAG,CAAlD;AACAD,EAAAA,eAAe,CAAC,CAAD,CAAf,IAAsBC,WAAtB;AACAD,EAAAA,eAAe,CAAC,CAAD,CAAf,IAAsBC,WAAW,GAAG,IAApC;AACAE,EAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAuC,QAAON,eAAe,CAAC,CAAD,CAAI,IAAGA,eAAe,CAAC,CAAD,CAAI,IAAGA,eAAe,CAAC,CAAD,CAAI,IAAGA,eAAe,CAAC,CAAD,CAAI,GAAnI,CAR6D,CAUzD;;AACA,QAAMO,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACG,QAAR,CAAiBd,YAAjB,EAA8BC,GAA9B,EAAkCC,GAAlC,CAApB,CAZyD,CAczD;;AACA,QAAMa,iBAAiB,GAAGZ,eAAe,CAACU,WAAW,CAACG,aAAb,CAAzC;AACA,QAAMC,WAAW,GAAGd,eAAe,CAACU,WAAW,CAACK,OAAb,CAAnC,CAhByD,CAkBzD;;AACA,QAAMC,iBAAiB,GAAGhB,eAAe,CAACU,WAAW,CAACO,UAAb,CAAzC;AACA,QAAMC,UAAU,GAAGlB,eAAe,CAACU,WAAW,CAACS,MAAb,CAAlC,CApByD,CAsBzD;AAEA;;AACA,MAAItB,YAAY,IAAEmB,iBAAd,IAAoDnB,YAAY,IAAEqB,UAAtE,EAAkF;AAC9Ed,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBc,UAApB,GAAiC,+FAAjC;AACAhB,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBe,oBAApB,GAAyC,OAAzC;AACAjB,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBgB,gBAApB,GAAqC,WAArC;AACH,GA7BwD,CA+BzD;;;AACA,MAAIzB,YAAY,IAAEiB,WAAd,IAA8CjB,YAAY,IAAEe,iBAAhE,EAAmF;AAC/ER,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBc,UAApB,GAAiC,mGAAjC;AACAhB,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBe,oBAApB,GAAyC,OAAzC;AACAjB,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBgB,gBAApB,GAAqC,WAArC;AACH;;AACL,sBAAO,qCAAP;AAEH;;KAvCQ3B,Q;AAyCT,eAAeA,QAAf","sourcesContent":["import React from \"react\";\n\n\nfunction SkyColor ({clouds,dateTimeZone,lat,lon,convertTimeZone}){\n    let skyBlueInitRGBA = [135, 206, 250, 1];\n    let cloudAmount = Number(clouds);\n    //Define individual RGBA values according to cloud amount\n    skyBlueInitRGBA[1] -= cloudAmount;\n    skyBlueInitRGBA[0] -= cloudAmount - cloudAmount / 2;\n    skyBlueInitRGBA[2] -= cloudAmount;\n    skyBlueInitRGBA[3] -= cloudAmount * 0.01;\n    document.body.style.backgroundColor = `rgba(${skyBlueInitRGBA[0]},${skyBlueInitRGBA[1]},${skyBlueInitRGBA[2]},${skyBlueInitRGBA[3]})`;\n\n        //Call library SunCalc\n        const SunCalc = require('suncalc');\n        const sunCalcData = SunCalc.getTimes(dateTimeZone,lat,lon);\n    \n        //Golden Hour Morning with Time Zone convert\n        const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd)\n        const sunriseTime = convertTimeZone(sunCalcData.sunrise)\n    \n        //Golden Hour Evening with Time Zone convert\n        const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n        const sunsetTime = convertTimeZone(sunCalcData.sunset);\n    \n        // console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`); \n    \n        //Sunset if statement\n        if (dateTimeZone>=goldenHourEvening &&                  dateTimeZone<=sunsetTime) {\n            document.body.style.background = \"linear-gradient(353deg, rgba(182,110,0,1) 0%, rgba(230,170,15,1) 35%, rgba(255,214,0,1) 100%)\";\n            document.body.style.backgroundAttachment=\"fixed\"\n            document.body.style.backgroundRepeat=\"no-repeat\"\n        }\n    \n        //Sunrise if statement\n        if (dateTimeZone>=sunriseTime &&                  dateTimeZone<=goldenHourMorning) {\n            document.body.style.background = \"linear-gradient(180deg, rgba(214,254,250,1) 0%, rgba(68,210,247,1) 65%, rgba(142,143,213,1) 100%)\";\n            document.body.style.backgroundAttachment=\"fixed\"\n            document.body.style.backgroundRepeat=\"no-repeat\"\n        }\n    return(<>\n    </>)\n}\n\nexport default SkyColor;"]},"metadata":{},"sourceType":"module"}