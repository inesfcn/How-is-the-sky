{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/duplicate-test/src/components/SkyColor.jsx\";\nimport React from \"react\";\nimport Clouds from \"./Clouds\";\nimport MoonSun from \"./MoonSun\";\n\nfunction SkyColor({\n  dateTimeZone,\n  lat,\n  lon,\n  convertTimeZone,\n  clouds\n}) {\n  // *******GOLDEN HOUR**********\n  //Call library SunCalc\n  const SunCalc = require('suncalc');\n\n  const sunCalcData = SunCalc.getTimes(dateTimeZone, lat, lon); //Golden Hour Morning with Time Zone convert\n\n  const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd);\n  const sunriseTime = convertTimeZone(sunCalcData.sunrise); //Golden Hour Evening with Time Zone convert\n\n  const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n  const sunsetTime = convertTimeZone(sunCalcData.sunset);\n  console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`);\n  console.log(dateTimeZone);\n  let cloudAmountGradient = 1.1 - Number(clouds) * 0.01;\n  let skyBlueInitRGBA = [135, 206, 250, 1]; //Define individual RGBA values according to cloud amount\n\n  let cloudAmount = Number(clouds);\n  skyBlueInitRGBA[1] -= cloudAmount;\n  skyBlueInitRGBA[0] -= cloudAmount - cloudAmount / 2;\n  skyBlueInitRGBA[2] -= cloudAmount;\n  skyBlueInitRGBA[3] -= cloudAmount * 0.01; //Sunset \n\n  if (dateTimeZone >= goldenHourEvening.getTime() && dateTimeZone <= sunsetTime.getTime()) {\n    console.log(\"yes!\");\n    document.body.style.background = `linear-gradient(353deg, rgba(182,110,0, ${cloudAmountGradient}) 0%, rgba(230,170,15,${cloudAmountGradient}) 35%, rgba(255,214,0,${cloudAmountGradient}) 100%)`;\n    document.body.style.backgroundAttachment = \"fixed\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n  } //Sunrise \n  else if (dateTimeZone >= sunriseTime && dateTimeZone <= goldenHourMorning) {\n      document.body.style.background = `linear-gradient(180deg, rgba(214,254,250,${cloudAmountGradient}) 0%, rgba(68,210,247,${cloudAmountGradient}) 65%, rgba(142,143,213,${cloudAmountGradient}) 100%)`;\n      document.body.style.backgroundAttachment = \"fixed\";\n      document.body.style.backgroundRepeat = \"no-repeat\";\n    } //Night\n    else if (dateTimeZone >= sunsetTime || dateTimeZone <= sunriseTime) {\n        document.body.style.backgroundColor = \"#2f3e46\";\n      } //Blue Sky with Clouds\n      else {\n          document.body.style.backgroundColor = `rgba(${skyBlueInitRGBA[0]},${skyBlueInitRGBA[1]},${skyBlueInitRGBA[2]},${skyBlueInitRGBA[3]})`;\n        }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Clouds, {\n      cloudAmount: cloudAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MoonSun, {\n      dateTimeZone: dateTimeZone,\n      sunsetTime: sunsetTime,\n      sunriseTime: sunriseTime,\n      cloudAmount: cloudAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_c = SkyColor;\nexport default SkyColor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SkyColor\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/duplicate-test/src/components/SkyColor.jsx"],"names":["React","Clouds","MoonSun","SkyColor","dateTimeZone","lat","lon","convertTimeZone","clouds","SunCalc","require","sunCalcData","getTimes","goldenHourMorning","goldenHourEnd","sunriseTime","sunrise","goldenHourEvening","goldenHour","sunsetTime","sunset","console","log","cloudAmountGradient","Number","skyBlueInitRGBA","cloudAmount","getTime","document","body","style","background","backgroundAttachment","backgroundRepeat","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Clouds from \"./Clouds\";\nimport MoonSun from \"./MoonSun\"\n\nfunction SkyColor ({dateTimeZone,lat,lon,convertTimeZone,clouds}){\n\n    // *******GOLDEN HOUR**********\n    //Call library SunCalc\n    const SunCalc = require('suncalc');\n    const sunCalcData = SunCalc.getTimes(dateTimeZone,lat,lon);\n\n    //Golden Hour Morning with Time Zone convert\n    const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd)\n    const sunriseTime = convertTimeZone(sunCalcData.sunrise);\n\n    //Golden Hour Evening with Time Zone convert\n    const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n    const sunsetTime = convertTimeZone(sunCalcData.sunset);\n\n    console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`); \n\n    console.log(dateTimeZone);\n\n    let cloudAmountGradient = 1.1 -(Number(clouds) *0.01);\n\n    let skyBlueInitRGBA = [135, 206, 250, 1];\n\n    //Define individual RGBA values according to cloud amount\n    let cloudAmount = Number(clouds);\n    skyBlueInitRGBA[1] -= cloudAmount;\n    skyBlueInitRGBA[0] -= cloudAmount - cloudAmount / 2;\n    skyBlueInitRGBA[2] -= cloudAmount;\n    skyBlueInitRGBA[3] -= cloudAmount * 0.01;\n  \n\n    //Sunset \n    if (dateTimeZone>=goldenHourEvening.getTime() && dateTimeZone<=sunsetTime.getTime()) {\n        console.log(\"yes!\");\n        document.body.style.background = `linear-gradient(353deg, rgba(182,110,0, ${cloudAmountGradient}) 0%, rgba(230,170,15,${cloudAmountGradient}) 35%, rgba(255,214,0,${cloudAmountGradient}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n    //Sunrise \n    else if (dateTimeZone>=sunriseTime && dateTimeZone<=goldenHourMorning) {\n        document.body.style.background = `linear-gradient(180deg, rgba(214,254,250,${cloudAmountGradient}) 0%, rgba(68,210,247,${cloudAmountGradient}) 65%, rgba(142,143,213,${cloudAmountGradient}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n    //Night\n    else  if (dateTimeZone >= sunsetTime|| dateTimeZone<= sunriseTime) {\n        document.body.style.backgroundColor = \"#2f3e46\";\n    }\n    //Blue Sky with Clouds\n    else{\n        document.body.style.backgroundColor = `rgba(${skyBlueInitRGBA[0]},${skyBlueInitRGBA[1]},${skyBlueInitRGBA[2]},${skyBlueInitRGBA[3]})`;\n    }\n\n\n    return(<>\n    <Clouds\n        cloudAmount={cloudAmount}\n    />\n\n    <MoonSun\n        dateTimeZone={dateTimeZone}\n        sunsetTime={sunsetTime}\n        sunriseTime={sunriseTime}\n        cloudAmount={cloudAmount}\n    />\n    </>)\n}\n\nexport default SkyColor;"]},"metadata":{},"sourceType":"module"}