{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport SkyColor from \"./SkyColor\";\nimport Night from \"./Night\";\nimport '../css/App.css';\n\nfunction App() {\n  _s();\n\n  //Get city from Input\n  const [city, setCity] = useState(\"\");\n\n  function handleCityInput(e) {\n    setCity(e.target.value);\n  } //Get info on enter\n\n\n  const [submit, setSubmit] = useState(false);\n\n  function handleSubmitOnEnter(e) {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSubmit(true);\n    }\n  } //Fetch API\n\n\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`;\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(URI);\n        const data = await response.json();\n        setData(data);\n      } catch (error) {\n        console.error(error.message);\n      }\n    };\n\n    fetchData();\n  }, [URI]); //Time\n\n  const time = new Date(); //TimeZone\n\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset); //Format Clock\n\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`; // console.log(data.main.temp);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!submit && /*#__PURE__*/_jsxDEV(CityInput, {\n      city: city,\n      handleCityInput: handleCityInput,\n      handleSubmitOnEnter: handleSubmitOnEnter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), submit && /*#__PURE__*/_jsxDEV(DisplaySky, {\n      city: city,\n      setSubmit: setSubmit,\n      temp: data.main.temp,\n      desc: data.weather[0].description,\n      currentTime: currentTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 18\n    }, this), submit && /*#__PURE__*/_jsxDEV(SkyColor, {\n      clouds: data.clouds.all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(Night, {\n      sunset: data.sys.sunset,\n      sunrise: data.sys.sunrise,\n      dateTimeZone: dateTimeZone,\n      offset: offset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), \" */}\"]\n  }, void 0, true);\n}\n\n_s(App, \"qnqKqeZf3sQo+NEHJ8/RWghCm1o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/App.jsx"],"names":["React","useState","useEffect","CityInput","DisplaySky","SkyColor","Night","App","city","setCity","handleCityInput","e","target","value","submit","setSubmit","handleSubmitOnEnter","key","preventDefault","API_KEY","process","env","REACT_APP_API_KEY","URI","data","setData","fetchData","response","fetch","json","error","console","message","time","Date","utc","getTime","getTimezoneOffset","offset","timezone","dateTimeZone","hour","getHours","slice","mins","getMinutes","currentTime","main","temp","weather","description","clouds","all","sys","sunset","sunrise"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,gBAAP;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBR,QAAQ,CAAC,EAAD,CAA/B;;AACA,WAASS,eAAT,CAAyBC,CAAzB,EAA2B;AACzBF,IAAAA,OAAO,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GALY,CAOb;;;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBd,QAAQ,CAAC,KAAD,CAAnC;;AACA,WAASe,mBAAT,CAA6BL,CAA7B,EAA+B;AAC7B,QAAIA,CAAC,CAACM,GAAF,KAAU,OAAd,EAAuB;AACrBN,MAAAA,CAAC,CAACO,cAAF;AACAH,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,GAdY,CAgBb;;;AACA,QAAMI,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AACA,QAAMC,GAAG,GAAI,oDAAmDf,IAAK,uBAAsBW,OAAQ,EAAnG;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,SAAS,GAAG,YAAY;AAC9B,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,CAA5B;AACA,cAAMC,IAAI,GAAG,MAAMG,QAAQ,CAACE,IAAT,EAAnB;AACAJ,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH,OAJD,CAIE,OAAOM,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACH;AACA,KARD;;AASAN,IAAAA,SAAS;AACZ,GAXQ,EAWN,CAACH,GAAD,CAXM,CAAT,CArBa,CAkCb;;AACA,QAAMU,IAAI,GAAG,IAAIC,IAAJ,EAAb,CAnCa,CAoCb;;AACA,QAAMC,GAAG,GAAGF,IAAI,CAACG,OAAL,KAAiBH,IAAI,CAACI,iBAAL,KAA2B,KAAxD;AACA,QAAMC,MAAM,GAAGd,IAAI,CAACe,QAAL,GAAgB,IAA/B;AACA,QAAMC,YAAY,GAAG,IAAIN,IAAJ,CAASC,GAAG,GAAG,UAAUG,MAAzB,CAArB,CAvCa,CAwCb;;AACA,MAAIG,IAAI,GAAG,CAAC,MAAMD,YAAY,CAACE,QAAb,EAAP,EAAgCC,KAAhC,CAAsC,CAAC,CAAvC,CAAX;AACA,MAAIC,IAAI,GAAG,CAAC,MAAMJ,YAAY,CAACK,UAAb,EAAP,EAAkCF,KAAlC,CAAwC,CAAC,CAAzC,CAAX;AACA,MAAIG,WAAW,GAAI,GAAEL,IAAK,IAAGG,IAAK,EAAlC,CA3Ca,CA6Cb;;AAEA,sBACE;AAAA,eAEG,CAAC9B,MAAD,iBACD,QAAC,SAAD;AACE,MAAA,IAAI,EAAEN,IADR;AAEE,MAAA,eAAe,EAAEE,eAFnB;AAGE,MAAA,mBAAmB,EAAEM;AAHvB;AAAA;AAAA;AAAA;AAAA,YAHF,EAWGF,MAAM,iBAAI,QAAC,UAAD;AACT,MAAA,IAAI,EAAEN,IADG;AAET,MAAA,SAAS,EAAEO,SAFF;AAGT,MAAA,IAAI,EAAES,IAAI,CAACuB,IAAL,CAAUC,IAHP;AAIT,MAAA,IAAI,EAAExB,IAAI,CAACyB,OAAL,CAAa,CAAb,EAAgBC,WAJb;AAKT,MAAA,WAAW,EAAEJ;AALJ;AAAA;AAAA;AAAA;AAAA,YAXb,EAmBGhC,MAAM,iBAAI,QAAC,QAAD;AAAU,MAAA,MAAM,EAAEU,IAAI,CAAC2B,MAAL,CAAYC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAnBb,eAqBE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAE5B,IAAI,CAAC6B,GAAL,CAASC,MAAxB;AAAgC,MAAA,OAAO,EAAE9B,IAAI,CAAC6B,GAAL,CAASE,OAAlD;AAA2D,MAAA,YAAY,EAAEf,YAAzE;AAAuF,MAAA,MAAM,EAAEF;AAA/F;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA,kBADF;AA0BD;;GAzEQ/B,G;;KAAAA,G;AA2ET,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport SkyColor from \"./SkyColor\";\nimport Night from \"./Night\"\nimport '../css/App.css';\n\n\nfunction App() {\n  //Get city from Input\n  const [city,setCity] = useState(\"\");\n  function handleCityInput(e){\n    setCity(e.target.value)\n  }\n\n  //Get info on enter\n  const [submit,setSubmit] = useState(false)\n  function handleSubmitOnEnter(e){\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSubmit(true)\n    }\n  }\n\n  //Fetch API\n  const API_KEY = process.env.REACT_APP_API_KEY \n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`;\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n      const fetchData = async () => {\n      try {\n          const response = await fetch(URI);\n          const data = await response.json();\n          setData(data);\n      } catch (error) {\n          console.error(error.message);\n      }\n      };\n      fetchData();\n  }, [URI]);\n\n  //Time\n  const time = new Date()\n  //TimeZone\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset);\n  //Format Clock\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`;\n\n  // console.log(data.main.temp);\n\n  return (\n    <>\n      {/* Input */}\n      {!submit &&\n      <CityInput\n        city={city}\n        handleCityInput={handleCityInput}\n        handleSubmitOnEnter={handleSubmitOnEnter}\n      />\n      }\n\n      {/* Display */}\n      {submit && <DisplaySky \n        city={city}\n        setSubmit={setSubmit}\n        temp={data.main.temp}\n        desc={data.weather[0].description}\n        currentTime={currentTime} \n      />}\n      \n      {submit && <SkyColor clouds={data.clouds.all}/>}\n\n      <Night sunset={data.sys.sunset} sunrise={data.sys.sunrise} dateTimeZone={dateTimeZone} offset={offset}/> */}\n      \n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}