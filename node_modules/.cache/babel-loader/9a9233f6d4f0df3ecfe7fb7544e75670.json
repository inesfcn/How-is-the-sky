{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/home/dcil121/Desktop/version2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import CityInput from\"./CityInput\";import DisplayInfo from\"./DisplayInfo\";import SkyColor from\"./SkyColor\";import'../css/App.css';function App(){//States\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState('Berlin'),_useState4=_slicedToArray(_useState3,2),search=_useState4[0],setSearch=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),city=_useState6[0],setCity=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),submit=_useState8[0],setSubmit=_useState8[1];//Get city from Input\nfunction handleCityInput(e){e.preventDefault();setCity(e.target.value);}//Get info on enter\nfunction handleSubmitOnEnter(e){if(e.key===\"Enter\"){e.preventDefault();setSearch(city);setCity(city);setSubmit(true);}}//Fetch API\nvar API_KEY=process.env.REACT_APP_API_KEY;var URI=\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(search,\"&units=metric&appid=\").concat(API_KEY);useEffect(function(){fetch(URI).then(function(response){return response.json();}).then(function(results){return setData(results);}).catch(function(error){console.error('Error',error);});},[URI]);var time=new Date();//convert to TimeZone\nfunction convertTimeZone(originalTime){var offset=data.timezone/3600;var utcOriginalTime=originalTime.getTime()+originalTime.getTimezoneOffset()*60000;var newDateTimeZone=new Date(utcOriginalTime+3600000*offset);var day=time.getDate();//Make sure it doesn't convert to the next day\nnewDateTimeZone.setDate(day);return newDateTimeZone;}var dateTimeZone=convertTimeZone(time);//Format Clock\nvar hour=(\"0\"+dateTimeZone.getHours()).slice(-2);var mins=(\"0\"+dateTimeZone.getMinutes()).slice(-2);var currentTime=\"\".concat(hour,\":\").concat(mins);return/*#__PURE__*/_jsxs(_Fragment,{children:[!submit&&/*#__PURE__*/_jsx(CityInput,{city:city,handleCityInput:handleCityInput,handleSubmitOnEnter:handleSubmitOnEnter}),submit&&/*#__PURE__*/_jsx(DisplayInfo,{setSubmit:setSubmit,city:city,temp:data.main.temp,desc:data.weather[0].description,currentTime:currentTime,clouds:data.clouds.all,sunset:data.sys.sunset,sunrise:data.sys.sunrise,convertTimeZone:convertTimeZone}),submit&&/*#__PURE__*/_jsx(SkyColor,{dateTimeZone:dateTimeZone,convertTimeZone:convertTimeZone,lat:data.coord.lat,lon:data.coord.lon,clouds:data.clouds.all})]});}export default App;","map":{"version":3,"sources":["/home/dcil121/Desktop/version2/src/components/App.jsx"],"names":["React","useState","useEffect","CityInput","DisplayInfo","SkyColor","App","data","setData","search","setSearch","city","setCity","submit","setSubmit","handleCityInput","e","preventDefault","target","value","handleSubmitOnEnter","key","API_KEY","process","env","REACT_APP_API_KEY","URI","fetch","then","response","json","results","catch","error","console","time","Date","convertTimeZone","originalTime","offset","timezone","utcOriginalTime","getTime","getTimezoneOffset","newDateTimeZone","day","getDate","setDate","dateTimeZone","hour","getHours","slice","mins","getMinutes","currentTime","main","temp","weather","description","clouds","all","sys","sunset","sunrise","coord","lat","lon"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplayInfo from \"./DisplayInfo\";\nimport SkyColor from \"./SkyColor\"\nimport '../css/App.css';\n\n\nfunction App() {\n\n  //States\n  const [data, setData] = useState([]);\n  const [search, setSearch] = useState('Berlin');\n  const [city,setCity] = useState(\"\");\n  const [submit,setSubmit] = useState(false);\n  \n  //Get city from Input\n  function handleCityInput(e){\n    e.preventDefault();\n    setCity(e.target.value)\n  }\n\n  //Get info on enter\n  function handleSubmitOnEnter(e){\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city);\n      setCity(city);\n      setSubmit(true)\n    }\n  }\n\n  //Fetch API\n  const API_KEY = process.env.REACT_APP_API_KEY \n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n\n  useEffect(() => {\n    fetch(URI)\n      .then((response) => response.json())\n      .then((results) => setData(results))\n      .catch((error) => {\n        console.error('Error', error);\n      });\n  }, [URI]);\n\n  const time = new Date();\n\n  //convert to TimeZone\n    function convertTimeZone(originalTime){\n      const offset = data.timezone / 3600;\n      let utcOriginalTime =\n        originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n      let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n      let day = time.getDate()\n      //Make sure it doesn't convert to the next day\n      newDateTimeZone.setDate(day)\n      return newDateTimeZone\n  }\n \n  const dateTimeZone = convertTimeZone(time);\n  //Format Clock\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`;\n\n  return (\n    <>\n      {/* Input */}\n      {!submit && <CityInput\n        city={city}\n        handleCityInput={handleCityInput}\n        handleSubmitOnEnter={handleSubmitOnEnter}\n      />}\n\n      {/* Display */}\n      {submit && <DisplayInfo \n        setSubmit={setSubmit}\n        city={city}\n        temp={data.main.temp}\n        desc={data.weather[0].description}\n        currentTime={currentTime} \n        clouds={data.clouds.all}\n        sunset={data.sys.sunset}\n        sunrise={data.sys.sunrise}\n        convertTimeZone={convertTimeZone}\n      />}\n      \n      {submit &&\n        <SkyColor\n        dateTimeZone={dateTimeZone}\n        convertTimeZone={convertTimeZone}\n        lat={data.coord.lat}\n        lon={data.coord.lon}\n        clouds={data.clouds.all}\n        />}\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}