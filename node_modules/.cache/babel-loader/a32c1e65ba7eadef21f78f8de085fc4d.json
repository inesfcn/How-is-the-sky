{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport React from \"react\";\n\nfunction Night({\n  sunrise,\n  sunset,\n  dateTimeZone,\n  offset,\n  convertTimeZone\n}) {\n  //Calculate Sunset UTC\n  let sundown = new Date(sunset * 1000);\n  const sundownTimeZone = convertTimeZone(sundown); //Calculate sunrise UTC\n\n  let sunup = new Date(sunrise * 1000);\n  const sunupTimeZone = convertTimeZone(sunup);\n  let utcSunrise = sunriseTime.getTime() + sunriseTime.getTimezoneOffset() * 60000;\n  let sunriseUTCnd = new Date(utcSunrise + 3600000 * offset); //Make black on sunset and sunrise\n\n  let sundownUTCgetTime = sundownTimeZone.getTime();\n  let sunupUTCgetTime = sunupTimeZone.getTime();\n  let dateTimeZoneGetTime = dateTimeZone.getTime();\n\n  if (dateTimeZoneGetTime >= sunsetUTCgetTime || dateTimeZoneGetTime <= sunriseUTCnd) {\n    document.body.style.backgroundColor = \"#2f3e46\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Night;\nexport default Night;\n\nvar _c;\n\n$RefreshReg$(_c, \"Night\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/Night.jsx"],"names":["React","Night","sunrise","sunset","dateTimeZone","offset","convertTimeZone","sundown","Date","sundownTimeZone","sunup","sunupTimeZone","utcSunrise","sunriseTime","getTime","getTimezoneOffset","sunriseUTCnd","sundownUTCgetTime","sunupUTCgetTime","dateTimeZoneGetTime","sunsetUTCgetTime","document","body","style","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,KAAT,CAAgB;AAACC,EAAAA,OAAD;AAASC,EAAAA,MAAT;AAAgBC,EAAAA,YAAhB;AAA6BC,EAAAA,MAA7B;AAAoCC,EAAAA;AAApC,CAAhB,EAAqE;AACjE;AACA,MAAIC,OAAO,GAAE,IAAIC,IAAJ,CAASL,MAAM,GAAG,IAAlB,CAAb;AACA,QAAMM,eAAe,GAAGH,eAAe,CAACC,OAAD,CAAvC,CAHiE,CAKjE;;AACA,MAAIG,KAAK,GAAG,IAAIF,IAAJ,CAASN,OAAO,GAAG,IAAnB,CAAZ;AACA,QAAMS,aAAa,GAAGL,eAAe,CAACI,KAAD,CAArC;AACA,MAAIE,UAAU,GACZC,WAAW,CAACC,OAAZ,KAAwBD,WAAW,CAACE,iBAAZ,KAAkC,KAD5D;AAEA,MAAIC,YAAY,GAAG,IAAIR,IAAJ,CAASI,UAAU,GAAG,UAAUP,MAAhC,CAAnB,CAViE,CAYjE;;AACA,MAAIY,iBAAiB,GAAGR,eAAe,CAACK,OAAhB,EAAxB;AACA,MAAII,eAAe,GAAGP,aAAa,CAACG,OAAd,EAAtB;AACA,MAAIK,mBAAmB,GAAGf,YAAY,CAACU,OAAb,EAA1B;;AACA,MAAIK,mBAAmB,IAAIC,gBAAvB,IAA2CD,mBAAmB,IAAGH,YAArE,EAAmF;AACjFK,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsC,SAAtC;AACD;;AAED,sBACI,qCADJ;AAIH;;KAxBQvB,K;AA0BT,eAAeA,KAAf","sourcesContent":["import React from \"react\";\n\nfunction Night ({sunrise,sunset,dateTimeZone,offset,convertTimeZone}){\n    //Calculate Sunset UTC\n    let sundown= new Date(sunset * 1000);\n    const sundownTimeZone = convertTimeZone(sundown)\n\n    //Calculate sunrise UTC\n    let sunup = new Date(sunrise * 1000);\n    const sunupTimeZone = convertTimeZone(sunup)\n    let utcSunrise =\n      sunriseTime.getTime() + sunriseTime.getTimezoneOffset() * 60000;\n    let sunriseUTCnd = new Date(utcSunrise + 3600000 * offset);\n\n    //Make black on sunset and sunrise\n    let sundownUTCgetTime = sundownTimeZone.getTime();\n    let sunupUTCgetTime = sunupTimeZone.getTime();\n    let dateTimeZoneGetTime = dateTimeZone.getTime();\n    if (dateTimeZoneGetTime >= sunsetUTCgetTime || dateTimeZoneGetTime<= sunriseUTCnd) {\n      document.body.style.backgroundColor = \"#2f3e46\";\n    }\n\n    return(\n        <>\n        </>\n    )\n}\n\nexport default Night;"]},"metadata":{},"sourceType":"module"}