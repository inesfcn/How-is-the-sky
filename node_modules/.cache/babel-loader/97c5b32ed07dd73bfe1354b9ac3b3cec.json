{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/duplicate-test/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport SkyColor from \"./SkyColor\";\nimport '../css/App.css';\n\nfunction App() {\n  _s();\n\n  //States\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState('Berlin');\n  const [city, setCity] = useState(\"\");\n  const [submit, setSubmit] = useState(false); //Get city from Input\n\n  function handleCityInput(e) {\n    e.preventDefault();\n    setCity(e.target.value);\n  } //Get info on enter\n\n\n  function handleSubmitOnEnter(e) {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city);\n      setCity(\"\");\n    }\n  } //Fetch API\n\n\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n  useEffect(() => {\n    setLoading(true);\n    fetch(URI).then(response => response.json()).then(results => setData(results)).then(() => setLoading(false)).catch(error => {\n      setLoading(false);\n      console.error('Error', error);\n    });\n  }, [URI]); //Time\n\n  const time = new Date(); //TimeZone\n\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset); //Format Clock\n\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`; //convert to TimeZone\n\n  function convertTimeZone(originalTime) {\n    let utcOriginalTime = originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n    let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n    return newDateTimeZone;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!submit && /*#__PURE__*/_jsxDEV(CityInput, {\n      city: city,\n      handleCityInput: handleCityInput,\n      handleSubmitOnEnter: handleSubmitOnEnter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), submit && /*#__PURE__*/_jsxDEV(DisplaySky, {\n      city: city,\n      setSubmit: setSubmit,\n      temp: data.main.temp,\n      desc: data.weather[0].description,\n      currentTime: currentTime,\n      clouds: data.clouds.all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 18\n    }, this), submit && /*#__PURE__*/_jsxDEV(SkyColor, {\n      dateTimeZone: dateTimeZone,\n      convertTimeZone: convertTimeZone,\n      lat: data.coord.lat,\n      lon: data.coord.lon,\n      clouds: data.clouds.all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"0nwlXxFDorNfTpNqh0NIJi+kR0Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/duplicate-test/src/components/App.jsx"],"names":["React","useState","useEffect","CityInput","DisplaySky","SkyColor","App","data","setData","loading","setLoading","search","setSearch","city","setCity","submit","setSubmit","handleCityInput","e","preventDefault","target","value","handleSubmitOnEnter","key","API_KEY","process","env","REACT_APP_API_KEY","URI","fetch","then","response","json","results","catch","error","console","time","Date","utc","getTime","getTimezoneOffset","offset","timezone","dateTimeZone","hour","getHours","slice","mins","getMinutes","currentTime","convertTimeZone","originalTime","utcOriginalTime","newDateTimeZone","main","temp","weather","description","clouds","all","coord","lat","lon"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport SkyColor from \"./SkyColor\"\nimport '../css/App.css';\n\n\nfunction App() {\n\n  //States\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState('Berlin');\n  const [city,setCity] = useState(\"\");\n  const [submit,setSubmit] = useState(false);\n  \n  //Get city from Input\n  function handleCityInput(e){\n    e.preventDefault();\n    setCity(e.target.value)\n  }\n\n  //Get info on enter\n  function handleSubmitOnEnter(e){\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city);\n      setCity(\"\")\n    }\n  }\n\n  //Fetch API\n  const API_KEY = process.env.REACT_APP_API_KEY \n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n\n  useEffect(() => {\n    setLoading(true);\n\n    fetch(URI)\n      .then((response) => response.json())\n      .then((results) => setData(results))\n      .then(() => setLoading(false))\n      .catch((error) => {\n        setLoading(false);\n        console.error('Error', error);\n      });\n  }, [URI]);\n\n  //Time\n  const time = new Date()\n  //TimeZone\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset);\n  //Format Clock\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`;\n\n  //convert to TimeZone\n  function convertTimeZone(originalTime){\n    let utcOriginalTime =\n      originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n    let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n    return newDateTimeZone\n  }\n\n  return (\n    <>\n      {/* Input */}\n      {!submit &&\n      <CityInput\n        city={city}\n        handleCityInput={handleCityInput}\n        handleSubmitOnEnter={handleSubmitOnEnter}\n      />\n      }\n\n      {/* Display */}\n      {submit && <DisplaySky \n        city={city}\n        setSubmit={setSubmit}\n        temp={data.main.temp}\n        desc={data.weather[0].description}\n        currentTime={currentTime} \n        clouds={data.clouds.all}\n      />}\n      \n      {submit &&\n        <SkyColor\n        dateTimeZone={dateTimeZone}\n        convertTimeZone={convertTimeZone}\n        lat={data.coord.lat}\n        lon={data.coord.lon}\n        clouds={data.clouds.all}\n        />}\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}