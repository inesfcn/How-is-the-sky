{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import CityInput from\"./CityInput\";import DisplaySky from\"./DisplaySky\";import SkyColor from\"./SkyColor\";import'../css/App.css';function App(){//Get city from Input\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),city=_useState2[0],setCity=_useState2[1];function handleCityInput(e){setCity(e.target.value);}//Get info on enter\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),submit=_useState4[0],setSubmit=_useState4[1];function handleSubmitOnEnter(e){if(e.key===\"Enter\"){e.preventDefault();setSubmit(true);}}//Fetch API\nvar API_KEY=process.env.REACT_APP_API_KEY;var URI=\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city,\"&units=metric&appid=\").concat(API_KEY);var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),data=_useState6[0],setData=_useState6[1];useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,_data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(URI);case 3:response=_context.sent;_context.next=6;return response.json();case 6:_data=_context.sent;setData(_data);_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.error(_context.t0.message);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[URI]);//Time\nvar time=new Date();//TimeZone\nvar utc=time.getTime()+time.getTimezoneOffset()*60000;var offset=data.timezone/3600;var dateTimeZone=new Date(utc+3600000*offset);//Format Clock\nvar hour=(\"0\"+dateTimeZone.getHours()).slice(-2);var mins=(\"0\"+dateTimeZone.getMinutes()).slice(-2);var currentTime=\"\".concat(hour,\":\").concat(mins);//convert to TimeZone\nfunction convertTimeZone(originalTime){var utcOriginalTime=originalTime.getTime()+originalTime.getTimezoneOffset()*60000;var newDateTimeZone=new Date(utcOriginalTime+3600000*offset);return newDateTimeZone;}return/*#__PURE__*/_jsxs(_Fragment,{children:[!submit&&/*#__PURE__*/_jsx(CityInput,{city:city,handleCityInput:handleCityInput,handleSubmitOnEnter:handleSubmitOnEnter}),submit&&/*#__PURE__*/_jsx(DisplaySky,{city:city,setSubmit:setSubmit,temp:data.main.temp,desc:data.weather[0].description,currentTime:currentTime,clouds:data.clouds.all}),submit&&/*#__PURE__*/_jsx(SkyColor,{dateTimeZone:dateTimeZone,convertTimeZone:convertTimeZone,lat:data.coord.lat,lon:data.coord.lon,clouds:data.clouds.all})]});}export default App;","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/App.jsx"],"names":["React","useState","useEffect","CityInput","DisplaySky","SkyColor","App","city","setCity","handleCityInput","e","target","value","submit","setSubmit","handleSubmitOnEnter","key","preventDefault","API_KEY","process","env","REACT_APP_API_KEY","URI","data","setData","fetchData","fetch","response","json","console","error","message","time","Date","utc","getTime","getTimezoneOffset","offset","timezone","dateTimeZone","hour","getHours","slice","mins","getMinutes","currentTime","convertTimeZone","originalTime","utcOriginalTime","newDateTimeZone","main","temp","weather","description","clouds","all","coord","lat","lon"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport SkyColor from \"./SkyColor\"\nimport '../css/App.css';\n\n\nfunction App() {\n  //Get city from Input\n  const [city,setCity] = useState(\"\");\n  function handleCityInput(e){\n    setCity(e.target.value)\n  }\n\n  //Get info on enter\n  const [submit,setSubmit] = useState(false)\n  function handleSubmitOnEnter(e){\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSubmit(true)\n    }\n  }\n\n  //Fetch API\n  const API_KEY = process.env.REACT_APP_API_KEY \n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`;\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n      const fetchData = async () => {\n      try {\n          const response = await fetch(URI);\n          const data = await response.json();\n          setData(data);\n      } catch (error) {\n          console.error(error.message);\n      }\n      };\n      fetchData();\n  }, [URI]);\n\n  //Time\n  const time = new Date()\n  //TimeZone\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset);\n  //Format Clock\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`;\n\n  //convert to TimeZone\n  function convertTimeZone(originalTime){\n    let utcOriginalTime =\n      originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n    let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n    return newDateTimeZone\n  }\n\n  return (\n    <>\n      {/* Input */}\n      {!submit &&\n      <CityInput\n        city={city}\n        handleCityInput={handleCityInput}\n        handleSubmitOnEnter={handleSubmitOnEnter}\n      />\n      }\n\n      {/* Display */}\n      {submit && <DisplaySky \n        city={city}\n        setSubmit={setSubmit}\n        temp={data.main.temp}\n        desc={data.weather[0].description}\n        currentTime={currentTime} \n        clouds={data.clouds.all}\n      />}\n      \n      {submit &&\n        <SkyColor\n        dateTimeZone={dateTimeZone}\n        convertTimeZone={convertTimeZone}\n        lat={data.coord.lat}\n        lon={data.coord.lon}\n        clouds={data.clouds.all}\n        />}\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}