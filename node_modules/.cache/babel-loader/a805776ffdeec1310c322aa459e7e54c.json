{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dcil121/Desktop/version2/src/components/DisplayInfo.jsx\";\nimport React from \"react\";\n\nfunction DisplayInfo({\n  city,\n  setSubmit,\n  temp,\n  desc,\n  currentTime,\n  clouds,\n  sunrise,\n  sunset,\n  convertTimeZone\n}) {\n  // No decimal value for temperature\n  let temperature = parseInt(temp); //Convert UNIX sunrise and sunset\n\n  function unixToFormat(unixDate) {\n    let newDate = new Date(unixDate * 1000);\n    let newDateTZ = convertTimeZone(newDate);\n    let hour = (\"0\" + newDateTZ.getHours()).slice(-2);\n    let mins = (\"0\" + newDateTZ.getMinutes()).slice(-2);\n    let formattedDate = `${hour}:${mins}`;\n    return formattedDate;\n  }\n\n  const sunriseFormatted = unixToFormat(sunrise);\n  const sunsetFormatted = unixToFormat(sunset);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"info-displays\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"infoDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"city-info\",\n        children: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"time-info\",\n        children: [\" | \", currentTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"temp-info\",\n        children: [\" | \", temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"temp-desc\",\n        children: [\" | \", desc]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"temp-clouds\",\n        children: [\" | Clouds: \", clouds, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"temp-sunrise\",\n        children: [\" | Sunrise: \", sunriseFormatted]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"temp-sunrise\",\n        children: [\" | Sunset: \", sunsetFormatted]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"anotherCity\",\n      onClick: () => setSubmit(false),\n      children: \"Check another city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_c = DisplayInfo;\nexport default DisplayInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayInfo\");","map":{"version":3,"sources":["/home/dcil121/Desktop/version2/src/components/DisplayInfo.jsx"],"names":["React","DisplayInfo","city","setSubmit","temp","desc","currentTime","clouds","sunrise","sunset","convertTimeZone","temperature","parseInt","unixToFormat","unixDate","newDate","Date","newDateTZ","hour","getHours","slice","mins","getMinutes","formattedDate","sunriseFormatted","sunsetFormatted"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqB;AAACC,EAAAA,IAAD;AAAMC,EAAAA,SAAN;AAAgBC,EAAAA,IAAhB;AAAqBC,EAAAA,IAArB;AAA0BC,EAAAA,WAA1B;AAAsCC,EAAAA,MAAtC;AAA6CC,EAAAA,OAA7C;AAAqDC,EAAAA,MAArD;AAA4DC,EAAAA;AAA5D,CAArB,EAAkG;AAC9F;AACA,MAAIC,WAAW,GAAGC,QAAQ,CAACR,IAAD,CAA1B,CAF8F,CAI7F;;AACA,WAASS,YAAT,CAAsBC,QAAtB,EAA+B;AAC5B,QAAIC,OAAO,GAAG,IAAIC,IAAJ,CAASF,QAAQ,GAAG,IAApB,CAAd;AACA,QAAIG,SAAS,GAAGP,eAAe,CAACK,OAAD,CAA/B;AACA,QAAIG,IAAI,GAAG,CAAC,MAAMD,SAAS,CAACE,QAAV,EAAP,EAA6BC,KAA7B,CAAmC,CAAC,CAApC,CAAX;AACA,QAAIC,IAAI,GAAG,CAAC,MAAMJ,SAAS,CAACK,UAAV,EAAP,EAA+BF,KAA/B,CAAqC,CAAC,CAAtC,CAAX;AACA,QAAIG,aAAa,GAAI,GAAEL,IAAK,IAAGG,IAAK,EAApC;AACA,WAAOE,aAAP;AACH;;AACD,QAAMC,gBAAgB,GAAGX,YAAY,CAACL,OAAD,CAArC;AACA,QAAMiB,eAAe,GAAGZ,YAAY,CAACJ,MAAD,CAApC;AAEA,sBACA;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,kBAA2BP;AAA3B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,0BAA8BI,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,0BAA8BK,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,0BAA8BN,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kCAAwCE,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,mCAA0CiB,gBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kCAAyCC,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAUI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,aAAhC;AAA8C,MAAA,OAAO,EAAE,MAAItB,SAAS,CAAC,KAAD,CAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAcH;;KA9BQF,W;AAgCT,eAAeA,WAAf","sourcesContent":["import React from \"react\";\n\nfunction DisplayInfo({city,setSubmit,temp,desc,currentTime,clouds,sunrise,sunset,convertTimeZone}){\n    // No decimal value for temperature\n    let temperature = parseInt(temp)\n\n     //Convert UNIX sunrise and sunset\n     function unixToFormat(unixDate){\n        let newDate = new Date(unixDate * 1000)\n        let newDateTZ = convertTimeZone(newDate)\n        let hour = (\"0\" + newDateTZ.getHours()).slice(-2);\n        let mins = (\"0\" + newDateTZ.getMinutes()).slice(-2);\n        let formattedDate = `${hour}:${mins}`;\n        return formattedDate;\n    }\n    const sunriseFormatted = unixToFormat(sunrise);\n    const sunsetFormatted = unixToFormat(sunset);\n   \n    return(\n    <div className=\"info-displays\">\n        <div className=\"infoDisplay\">\n            <h1 className=\"city-info\">{city}</h1>\n            <h1 className=\"time-info\"> | {currentTime}</h1>\n            <h1 className=\"temp-info\"> | {temperature}Â°C</h1>\n            <h1 className=\"temp-desc\"> | {desc}</h1>\n            <h1 className=\"temp-clouds\"> | Clouds: {clouds}%</h1>\n            <h1 className=\"temp-sunrise\"> | Sunrise: {sunriseFormatted}</h1>\n            <h1 className=\"temp-sunrise\"> | Sunset: {sunsetFormatted}</h1>\n        </div>\n        <button type=\"button\" className=\"anotherCity\" onClick={()=>setSubmit(false)}>Check another city</button>\n\t</div>\n    )\n}\n\nexport default DisplayInfo;"]},"metadata":{},"sourceType":"module"}