{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport '../css/App.css';\n\nfunction App() {\n  _s();\n\n  //Get city from Input\n  const [city, setCity] = useState(\"Berlin\");\n  const [search, setSearch] = useState(\"Berlin\");\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n\n  function handleCityInput(e) {\n    setCity(e.target.value);\n  } //Get info on enter\n\n\n  function handleSubmitOnEnter(e) {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city);\n    }\n  } //Fetch API\n\n\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n  useEffect(() => {\n    setLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(URI);\n        const results = await response.json();\n        console.log(results);\n        setData(results);\n        setLoading(false);\n      } catch (error) {\n        setLoading(false);\n        console.error(error.message);\n      }\n    };\n\n    fetchData();\n  }, [URI]); //Here we use the .then syntax to fetch the data.\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(URI).then(response => response.json()).then(data => setData(data));\n    setLoading(false).catch(error => {\n      console.error(error);\n    });\n  }, [URI]); //Time\n\n  const time = new Date(); //TimeZone\n\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset); //Format Clock\n\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`; //convert to TimeZone\n\n  function convertTimeZone(originalTime) {\n    let utcOriginalTime = originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n    let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n    return newDateTimeZone;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CityInput, {\n      city: city,\n      handleCityInput: handleCityInput,\n      handleSubmitOnEnter: handleSubmitOnEnter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"I am here wtf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DisplaySky, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true) // {loading ? <p>Loading...</p> :\n  // <DisplaySky \n  //    city={search}\n  //    temp={data.main.temp}\n  //   />\n  //  }\n  //      desc={data.weather[0].description}\n  //      currentTime={currentTime} \n  //      clouds={data.clouds.all}\n  //      dateTimeZone={dateTimeZone}\n  //      convertTimeZone={convertTimeZone}\n  //      lat={data.coord.lat}\n  //      lon={data.coord.lon}\n  //    />\n  //    }\n  // </>\n  ;\n}\n\n_s(App, \"tq8ivL1SghLPZ2lozSGb/qeF/RE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/App.jsx"],"names":["React","useState","useEffect","CityInput","DisplaySky","App","city","setCity","search","setSearch","loading","setLoading","data","setData","handleCityInput","e","target","value","handleSubmitOnEnter","key","preventDefault","API_KEY","process","env","REACT_APP_API_KEY","URI","fetchData","response","fetch","results","json","console","log","error","message","then","catch","time","Date","utc","getTime","getTimezoneOffset","offset","timezone","dateTimeZone","hour","getHours","slice","mins","getMinutes","currentTime","convertTimeZone","originalTime","utcOriginalTime","newDateTimeZone"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport '../css/App.css';\n\n\nfunction App() {\n  //Get city from Input\n  const [city,setCity] = useState(\"Berlin\");\n  const [search,setSearch] = useState(\"Berlin\");\n  const [loading,setLoading] = useState(false)\n  const [data, setData] = useState([]);\n\n\n  function handleCityInput(e){\n    setCity(e.target.value)\n  }\n\n  //Get info on enter\n  function handleSubmitOnEnter(e){\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city)\n    }\n  }\n\n  //Fetch API\n  const API_KEY = process.env.REACT_APP_API_KEY \n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n\n\n  useEffect(() => {\n      setLoading(true);\n      const fetchData = async () => {\n      try {\n          const response = await fetch(URI);\n          const results = await response.json();\n          console.log(results);\n          setData(results);\n          setLoading(false);\n      } catch (error) {\n          setLoading(false)\n          console.error(error.message);\n      }\n      };\n      fetchData();\n  }, [URI]);\n\n  //Here we use the .then syntax to fetch the data.\n useEffect(() => {\n  setLoading(true)\n fetch(URI)\n .then((response) => response.json())\n .then((data) => setData(data))\n    setLoading(false)\n\n .catch((error) => {\n console.error(error);\n });\n }, [URI]); \n\n  //Time\n  const time = new Date()\n  //TimeZone\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset);\n  //Format Clock\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`;\n\n  //convert to TimeZone\n  function convertTimeZone(originalTime){\n    let utcOriginalTime =\n      originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n    let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n    return newDateTimeZone\n  }\n\n  return (\n      <>\n        <CityInput\n          city={city}\n          handleCityInput={handleCityInput}\n          handleSubmitOnEnter={handleSubmitOnEnter}\n        />\n\n        {loading?<p>Loading</p>:\n        <>\n        <p>I am here wtf</p>\n        <DisplaySky data={data}/>\n        </>\n        } \n\n      </>\n\n\n        // {loading ? <p>Loading...</p> :\n       // <DisplaySky \n      //    city={search}\n      //    temp={data.main.temp}\n      //   />\n     //  }\n    //      desc={data.weather[0].description}\n    //      currentTime={currentTime} \n    //      clouds={data.clouds.all}\n    //      dateTimeZone={dateTimeZone}\n    //      convertTimeZone={convertTimeZone}\n    //      lat={data.coord.lat}\n    //      lon={data.coord.lon}\n    //    />\n    //    }\n      // </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}