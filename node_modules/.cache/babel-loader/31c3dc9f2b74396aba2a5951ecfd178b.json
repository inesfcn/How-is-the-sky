{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport SkyColor from \"./SkyColor\";\nimport '../css/App.css';\n\nfunction App() {\n  _s();\n\n  //Get city from Input\n  const [city, setCity] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  function handleCityInput(e) {\n    setCity(e.target.value);\n  } //Get info on enter\n\n\n  function handleSubmitOnEnter(e) {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city);\n    }\n  } //Fetch API\n\n\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    setLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch(URI);\n        const data = await response.json();\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(error.message);\n      }\n    };\n\n    fetchData();\n  }, [URI]); //Time\n\n  const time = new Date(); //TimeZone\n\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset); //Format Clock\n\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`; //convert to TimeZone\n\n  function convertTimeZone(originalTime) {\n    let utcOriginalTime = originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n    let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n    return newDateTimeZone;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CityInput, {\n      city: city,\n      handleCityInput: handleCityInput,\n      handleSubmitOnEnter: handleSubmitOnEnter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(DisplaySky, {\n      city: city,\n      temp: data.main.temp,\n      desc: data.weather[0].description,\n      currentTime: currentTime,\n      clouds: data.clouds.all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SkyColor, {\n      dateTimeZone: dateTimeZone,\n      convertTimeZone: convertTimeZone,\n      lat: data.coord.lat,\n      lon: data.coord.lon,\n      clouds: data.clouds.all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), \"}\"]\n  }, void 0, true);\n}\n\n_s(App, \"GdZC+49sjOnfcBTijYV4ZVbZu+0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/App.jsx"],"names":["React","useState","useEffect","CityInput","DisplaySky","SkyColor","App","city","setCity","search","setSearch","loading","setLoading","handleCityInput","e","target","value","handleSubmitOnEnter","key","preventDefault","API_KEY","process","env","REACT_APP_API_KEY","URI","data","setData","fetchData","response","fetch","json","error","console","message","time","Date","utc","getTime","getTimezoneOffset","offset","timezone","dateTimeZone","hour","getHours","slice","mins","getMinutes","currentTime","convertTimeZone","originalTime","utcOriginalTime","newDateTimeZone","main","temp","weather","description","clouds","all","coord","lat","lon"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplaySky from \"./DisplaySky\";\nimport SkyColor from \"./SkyColor\"\nimport '../css/App.css';\n\n\nfunction App() {\n  //Get city from Input\n  const [city,setCity] = useState(\"\");\n  const [search,setSearch] = useState(\"\");\n  const [loading,setLoading] = useState(false)\n\n\n  function handleCityInput(e){\n    setCity(e.target.value)\n  }\n\n  //Get info on enter\n  function handleSubmitOnEnter(e){\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city)\n    }\n  }\n\n  //Fetch API\n  const API_KEY = process.env.REACT_APP_API_KEY \n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n      setLoading(true);\n      const fetchData = async () => {\n      try {\n          const response = await fetch(URI);\n          const data = await response.json();\n          setData(data);\n          setLoading(false);\n      } catch (error) {\n          console.error(error.message);\n      }\n      };\n      fetchData();\n  }, [URI]);\n\n  //Time\n  const time = new Date()\n  //TimeZone\n  const utc = time.getTime() + time.getTimezoneOffset() * 60000;\n  const offset = data.timezone / 3600;\n  const dateTimeZone = new Date(utc + 3600000 * offset);\n  //Format Clock\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`;\n\n  //convert to TimeZone\n  function convertTimeZone(originalTime){\n    let utcOriginalTime =\n      originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n    let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n    return newDateTimeZone\n  }\n\n  return (\n    <>\n      {/* Input */}\n      <CityInput\n        city={city}\n        handleCityInput={handleCityInput}\n        handleSubmitOnEnter={handleSubmitOnEnter}\n      />\n\n      {/* Display */}\n      {loading ? <p>Loading...</p> :\n      <DisplaySky \n        city={city}\n        temp={data.main.temp}\n        desc={data.weather[0].description}\n        currentTime={currentTime} \n        clouds={data.clouds.all}\n      />\n      }\n      \n      <SkyColor\n        dateTimeZone={dateTimeZone}\n        convertTimeZone={convertTimeZone}\n        lat={data.coord.lat}\n        lon={data.coord.lon}\n        clouds={data.clouds.all}\n        />\n      }\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}