{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport React from \"react\";\n\nfunction Sunset({\n  dateTimeZone,\n  lat,\n  lon,\n  convertTimeZone,\n  clouds\n}) {\n  //Call library SunCalc\n  const SunCalc = require('suncalc');\n\n  const sunCalcData = SunCalc.getTimes(dateTimeZone, lat, lon); //Golden Hour Morning with Time Zone convert\n\n  const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd);\n  const sunriseTime = convertTimeZone(sunCalcData.sunrise); //Golden Hour Evening with Time Zone convert\n\n  const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n  const sunsetTime = convertTimeZone(sunCalcData.sunset); // console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`); \n\n  let cloudAmount = Number(clouds) * 0.01;\n  console.log(cloudAmount); //Sunset if statement\n\n  if (dateTimeZone >= goldenHourEvening && dateTimeZone <= sunsetTime) {\n    document.body.style.background = `linear-gradient(353deg, rgba(182,110,0, ${cloudAmount}) 0%, rgba(230,170,15,${cloudAmount}) 35%, rgba(255,214,0,${cloudAmount}) 100%)`;\n    document.body.style.backgroundAttachment = \"fixed\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n  } //Sunrise if statement\n\n\n  if (dateTimeZone >= sunriseTime && dateTimeZone <= goldenHourMorning) {\n    document.body.style.background = `linear-gradient(180deg, rgba(214,254,250,${cloudAmount}) 0%, rgba(68,210,247,${cloudAmount}) 65%, rgba(142,143,213,${cloudAmount}) 100%)`;\n    document.body.style.backgroundAttachment = \"fixed\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = Sunset;\nexport default Sunset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sunset\");","map":{"version":3,"sources":["/home/dcil121/Desktop/dci/SPA/exercises/weather-sky-react/weather-sky/src/components/Sunset.jsx"],"names":["React","Sunset","dateTimeZone","lat","lon","convertTimeZone","clouds","SunCalc","require","sunCalcData","getTimes","goldenHourMorning","goldenHourEnd","sunriseTime","sunrise","goldenHourEvening","goldenHour","sunsetTime","sunset","cloudAmount","Number","console","log","document","body","style","background","backgroundAttachment","backgroundRepeat"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,CAAiB;AAAEC,EAAAA,YAAF;AAAeC,EAAAA,GAAf;AAAmBC,EAAAA,GAAnB;AAAuBC,EAAAA,eAAvB;AAAuCC,EAAAA;AAAvC,CAAjB,EAAgE;AAC5D;AACA,QAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACG,QAAR,CAAiBR,YAAjB,EAA8BC,GAA9B,EAAkCC,GAAlC,CAApB,CAH4D,CAK5D;;AACA,QAAMO,iBAAiB,GAAGN,eAAe,CAACI,WAAW,CAACG,aAAb,CAAzC;AACA,QAAMC,WAAW,GAAGR,eAAe,CAACI,WAAW,CAACK,OAAb,CAAnC,CAP4D,CAS5D;;AACA,QAAMC,iBAAiB,GAAGV,eAAe,CAACI,WAAW,CAACO,UAAb,CAAzC;AACA,QAAMC,UAAU,GAAGZ,eAAe,CAACI,WAAW,CAACS,MAAb,CAAlC,CAX4D,CAa5D;;AAEA,MAAIC,WAAW,GAAIC,MAAM,CAACd,MAAD,CAAN,GAAgB,IAAnC;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAhB4D,CAkB5D;;AACA,MAAIjB,YAAY,IAAEa,iBAAd,IAAoDb,YAAY,IAAEe,UAAtE,EAAkF;AAC9EM,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,UAApB,GAAkC,2CAA0CP,WAAY,yBAAwBA,WAAY,yBAAwBA,WAAY,SAAhK;AACAI,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,oBAApB,GAAyC,OAAzC;AACAJ,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBG,gBAApB,GAAqC,WAArC;AACH,GAvB2D,CAyB5D;;;AACA,MAAI1B,YAAY,IAAEW,WAAd,IAA8CX,YAAY,IAAES,iBAAhE,EAAmF;AAC/EY,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,UAApB,GAAkC,4CAA2CP,WAAY,yBAAwBA,WAAY,2BAA0BA,WAAY,SAAnK;AACAI,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,oBAApB,GAAyC,OAAzC;AACAJ,IAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBG,gBAApB,GAAqC,WAArC;AACH;;AAED,sBAAO,qCAAP;AAEH;;KAlCQ3B,M;AAoCT,eAAeA,MAAf","sourcesContent":["import React from \"react\";\n\nfunction Sunset ({ dateTimeZone,lat,lon,convertTimeZone,clouds}){\n    //Call library SunCalc\n    const SunCalc = require('suncalc');\n    const sunCalcData = SunCalc.getTimes(dateTimeZone,lat,lon);\n\n    //Golden Hour Morning with Time Zone convert\n    const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd)\n    const sunriseTime = convertTimeZone(sunCalcData.sunrise)\n\n    //Golden Hour Evening with Time Zone convert\n    const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n    const sunsetTime = convertTimeZone(sunCalcData.sunset);\n\n    // console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`); \n\n    let cloudAmount = (Number(clouds) *0.01);\n    console.log(cloudAmount);\n\n    //Sunset if statement\n    if (dateTimeZone>=goldenHourEvening &&                  dateTimeZone<=sunsetTime) {\n        document.body.style.background = `linear-gradient(353deg, rgba(182,110,0, ${cloudAmount}) 0%, rgba(230,170,15,${cloudAmount}) 35%, rgba(255,214,0,${cloudAmount}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n\n    //Sunrise if statement\n    if (dateTimeZone>=sunriseTime &&                  dateTimeZone<=goldenHourMorning) {\n        document.body.style.background = `linear-gradient(180deg, rgba(214,254,250,${cloudAmount}) 0%, rgba(68,210,247,${cloudAmount}) 65%, rgba(142,143,213,${cloudAmount}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n\n    return(<>\n    </>)\n}\n\nexport default Sunset;"]},"metadata":{},"sourceType":"module"}