{"version":3,"sources":["components/CityInput.jsx","components/DisplayInfo.jsx","assets/cloud.png","components/Clouds.jsx","components/MoonSun.jsx","components/SkyColor.jsx","components/App.jsx","index.js"],"names":["CityInput","city","handleCityInput","handleSubmitOnEnter","className","htmlFor","type","name","value","onChange","e","onKeyDown","DisplayInfo","setSubmit","temp","desc","currentTime","clouds","sunrise","sunset","convertTimeZone","temperature","parseInt","unixToFormat","unixDate","newDate","Date","newDateTZ","hour","getHours","slice","mins","getMinutes","sunriseFormatted","sunsetFormatted","onClick","Clouds","cloudAmount","src","cloud","alt","MoonSun","dateTimeZone","sunsetTime","sunriseTime","useState","moon","setMoon","sun","setSun","useEffect","moonPhase","require","getMoonIllumination","phase","boxShadowPX","Math","abs","opacityClouds","moonStyle","boxShadow","sunStyle","backgroundColor","style","SkyColor","lat","lon","sunCalcData","getTimes","goldenHourMorning","goldenHourEnd","goldenHourEvening","goldenHour","console","log","cloudAmountGradient","Number","skyBlueInitRGBA","document","body","background","backgroundAttachment","backgroundRepeat","App","data","setData","search","setSearch","setCity","submit","URI","fetch","then","response","json","results","catch","error","time","originalTime","offset","timezone","utcOriginalTime","getTime","getTimezoneOffset","newDateTimeZone","day","getDate","setDate","preventDefault","target","key","main","weather","description","all","sys","coord","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0c1f5661.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CityInput({city,handleCityInput,handleSubmitOnEnter}){\n    return(<>\n        <div className=\"inputCityDiv\">\n            <form>\n                <label htmlFor=\"city-input\">How is the sky in: </label>\n                <input type=\"text\" name=\"city-input\" value={city} onChange={(e)=>handleCityInput(e)}  onKeyDown={(e)=>handleSubmitOnEnter(e)} />\n            </form>\n        </div>\n    </>)\n}\n\nexport default CityInput ;","import React from \"react\";\n\nfunction DisplayInfo({city,setSubmit,temp,desc,currentTime,clouds,sunrise,sunset,convertTimeZone}){\n    // No decimal value for temperature\n    let temperature = parseInt(temp)\n\n     //Convert UNIX sunrise and sunset\n     function unixToFormat(unixDate){\n        let newDate = new Date(unixDate * 1000)\n        let newDateTZ = convertTimeZone(newDate)\n        let hour = (\"0\" + newDateTZ.getHours()).slice(-2);\n        let mins = (\"0\" + newDateTZ.getMinutes()).slice(-2);\n        let formattedDate = `${hour}:${mins}`;\n        return formattedDate;\n    }\n    const sunriseFormatted = unixToFormat(sunrise);\n    const sunsetFormatted = unixToFormat(sunset);\n   \n    return(\n    <div className=\"info-displays\">\n        <div className=\"infoDisplay\">\n            <h1 className=\"city-info\">{city}</h1>\n            <h1 className=\"time-info\"> | {currentTime}</h1>\n            <h1 className=\"temp-info\"> | {temperature}Â°C</h1>\n            <h1 className=\"temp-desc\"> | {desc}</h1>\n            <h1 className=\"temp-clouds\"> | Clouds: {clouds}%</h1>\n            <h1 className=\"temp-sunrise\"> | Sunrise: {sunriseFormatted}</h1>\n            <h1 className=\"temp-sunrise\"> | Sunset: {sunsetFormatted}</h1>\n        </div>\n        <button type=\"button\" className=\"anotherCity\" onClick={()=>setSubmit(false)}>Check another city</button>\n\t</div>\n    )\n}\n\nexport default DisplayInfo;","export default __webpack_public_path__ + \"static/media/cloud.2a8311b1.png\";","import React from \"react\";\nimport cloud from \"../assets/cloud.png\"\n\nfunction Clouds({cloudAmount}){\n\n\n    return(\n        <div className=\"clouds\">\n            {cloudAmount>10&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud1\"></img>\n            }\n            {cloudAmount>20&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud2\"></img>\n            }\n            {cloudAmount>30&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud3\"></img>\n            }\n            {cloudAmount>40&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud4\"></img>\n            }\n            {cloudAmount>50&& \n            <img src={cloud} alt=\"cloud\" className=\"cloud5\"></img>\n            }\n            {cloudAmount>60&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud6\"></img>\n            }\n            {cloudAmount>70&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud7\"></img>\n            }\n            {cloudAmount>80&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud8\"></img>\n            }\n            {cloudAmount>90&&\n            <img src={cloud} alt=\"cloud\" className=\"cloud9\"></img>\n            }\n            \n        </div>\n    )\n}\n\nexport default Clouds;\n","import React, { useEffect, useState } from \"react\";\n\nfunction MoonSun ({dateTimeZone, sunsetTime,sunriseTime,cloudAmount}){\n\n    const [moon,setMoon]= useState(false)\n    const [sun,setSun]=useState(true)\n\n    useEffect(()=>{\n        if (dateTimeZone >= sunsetTime|| dateTimeZone<= sunriseTime) {\n            setMoon(true);\n            setSun(false);\n        }else{\n            setSun(true);\n            setMoon(false)\n        }\n    },[dateTimeZone,sunriseTime,sunsetTime])\n        \n    //SunCalc \n    const SunCalc = require('suncalc');\n    const moonData = SunCalc.getMoonIllumination(dateTimeZone);\n    const moonPhase = moonData.phase\n\n    const boxShadowPX=-Math.abs(moonPhase * 210) ;\n    const opacityClouds =1- (cloudAmount * 0.01);\n\n    const moonStyle = {\n        boxShadow: `inset ${boxShadowPX}px 0px rgba(241, 238, 225, ${opacityClouds})`,\n    };\n\n    const sunStyle = {\n        backgroundColor: `rgba(255, 217, 0, ${opacityClouds})`,\n    }\n\n    return(\n    <>\n    {moon&&\n    <div className=\"moon\" style={moonStyle}></div>\n    }\n    {sun&&\n    <div className=\"sun\" style={sunStyle}></div>\n    }\n    </>)\n}\n\n export default MoonSun;","import React from \"react\";\nimport Clouds from \"./Clouds\";\nimport MoonSun from \"./MoonSun\"\n\nfunction SkyColor ({dateTimeZone,lat,lon,convertTimeZone,clouds}){\n\n    // *******GOLDEN HOUR**********\n    //Call library SunCalc\n    const SunCalc = require('suncalc');\n    const sunCalcData = SunCalc.getTimes(dateTimeZone,lat,lon);\n\n    //Golden Hour Morning with Time Zone convert\n    const goldenHourMorning = convertTimeZone(sunCalcData.goldenHourEnd)\n    const sunriseTime = convertTimeZone(sunCalcData.sunrise);\n\n    //Golden Hour Evening with Time Zone convert\n    const goldenHourEvening = convertTimeZone(sunCalcData.goldenHour);\n    const sunsetTime = convertTimeZone(sunCalcData.sunset);\n\n     console.log(`goldenHourMorning:${goldenHourMorning}\\n sunrise:${sunriseTime}\\n goldenHourEvening:${goldenHourEvening} \\n sunset: ${sunsetTime}`); \n\n    let cloudAmountGradient = 1.2 -(Number(clouds) *0.01);\n\n    let skyBlueInitRGBA = [135, 206, 250, 1];\n\n    //Define individual RGBA values according to cloud amount\n    let cloudAmount = Number(clouds);\n    skyBlueInitRGBA[1] -= cloudAmount;\n    skyBlueInitRGBA[0] -= cloudAmount - cloudAmount / 2;\n    skyBlueInitRGBA[2] -= cloudAmount;\n    skyBlueInitRGBA[3] -= cloudAmount * 0.01;\n  \n\n    //Sunset \n    if (dateTimeZone>=goldenHourEvening && dateTimeZone<=sunsetTime) {\n        document.body.style.background = `linear-gradient(353deg, rgba(182,110,0, ${cloudAmountGradient}) 0%, rgba(230,170,15,${cloudAmountGradient}) 35%, rgba(255,214,0,${cloudAmountGradient}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n    //Sunrise \n    else if (dateTimeZone>=sunriseTime && dateTimeZone<=goldenHourMorning) {\n        document.body.style.background = `linear-gradient(180deg, rgba(214,254,250,${cloudAmountGradient}) 0%, rgba(68,210,247,${cloudAmountGradient}) 65%, rgba(142,143,213,${cloudAmountGradient}) 100%)`;\n        document.body.style.backgroundAttachment=\"fixed\"\n        document.body.style.backgroundRepeat=\"no-repeat\"\n    }\n    //Night\n    else  if (dateTimeZone >= sunsetTime|| dateTimeZone<= sunriseTime) {\n        document.body.style.backgroundColor = \"#2f3e46\";\n    }\n    //Blue Sky with Clouds\n    else {\n        document.body.style.backgroundColor = `rgba(${skyBlueInitRGBA[0]},${skyBlueInitRGBA[1]},${skyBlueInitRGBA[2]},${skyBlueInitRGBA[3]})`;\n    }\n\n\n    return(<>\n    <Clouds\n        cloudAmount={cloudAmount}\n    />\n\n    <MoonSun\n        dateTimeZone={dateTimeZone}\n        sunsetTime={sunsetTime}\n        sunriseTime={sunriseTime}\n        cloudAmount={cloudAmount}\n    />\n    </>)\n}\n\nexport default SkyColor;","import React, {useState, useEffect} from \"react\";\nimport CityInput from \"./CityInput\";\nimport DisplayInfo from \"./DisplayInfo\";\nimport SkyColor from \"./SkyColor\"\nimport '../css/App.css';\n\n\nfunction App() {\n\n  //States\n  const [data, setData] = useState([]);\n  const [search, setSearch] = useState('Berlin');\n  const [city,setCity] = useState(\"\");\n  const [submit,setSubmit] = useState(false);\n  \n  //Get city from Input\n  function handleCityInput(e){\n    e.preventDefault();\n    setCity(e.target.value)\n  }\n\n  //Get info on enter\n  function handleSubmitOnEnter(e){\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      setSearch(city);\n      setCity(city);\n      setSubmit(true)\n    }\n  }\n\n  //Fetch API\n  const API_KEY = \"ceb3c407c92ea3f7e0ea24125a3072df\" \n  const URI = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${API_KEY}`;\n\n  useEffect(() => {\n    fetch(URI)\n      .then((response) => response.json())\n      .then((results) => setData(results))\n      .catch((error) => {\n        console.error('Error', error);\n      });\n  }, [URI]);\n\n  const time = new Date();\n\n  //convert to TimeZone\n    function convertTimeZone(originalTime){\n      const offset = data.timezone / 3600;\n      let utcOriginalTime =\n        originalTime.getTime() + originalTime.getTimezoneOffset() * 60000;\n      let newDateTimeZone = new Date(utcOriginalTime + 3600000 * offset);\n      let day = time.getDate()\n      //Make sure it doesn't convert to the next day\n      newDateTimeZone.setDate(day)\n      return newDateTimeZone\n  }\n \n  const dateTimeZone = convertTimeZone(time);\n  //Format Clock\n  let hour = (\"0\" + dateTimeZone.getHours()).slice(-2);\n  let mins = (\"0\" + dateTimeZone.getMinutes()).slice(-2);\n  let currentTime = `${hour}:${mins}`;\n\n  return (\n    <>\n      {/* Input */}\n      {!submit && <CityInput\n        city={city}\n        handleCityInput={handleCityInput}\n        handleSubmitOnEnter={handleSubmitOnEnter}\n      />}\n\n      {/* Display */}\n      {submit && <DisplayInfo \n        setSubmit={setSubmit}\n        city={city}\n        temp={data.main.temp}\n        desc={data.weather[0].description}\n        currentTime={currentTime} \n        clouds={data.clouds.all}\n        sunset={data.sys.sunset}\n        sunrise={data.sys.sunrise}\n        convertTimeZone={convertTimeZone}\n      />}\n      \n      {submit &&\n        <SkyColor\n        dateTimeZone={dateTimeZone}\n        convertTimeZone={convertTimeZone}\n        lat={data.coord.lat}\n        lon={data.coord.lon}\n        clouds={data.clouds.all}\n        />}\n\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}